# -*- coding: utf-8 -*-
"""SimpleANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/135Doj9g731zGYM90jaMvPa3kI-hOcCmr
"""

!pip install keras

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from google.colab import files
files.upload()

# Importing the dataset
dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:13].values
y = dataset.iloc[:, 13].values

# Encoding categorical data
# Encoding the Independent Variable
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_geo = LabelEncoder()
X[:, 1] = labelencoder_X_geo.fit_transform(X[:, 1])

labelencoder_X_gen = LabelEncoder()
X[:, 2] = labelencoder_X_gen.fit_transform(X[:, 2])


onehotencoder = OneHotEncoder(categorical_features = [1])
X = onehotencoder.fit_transform(X).toarray()

X = X[:, 1:]

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)


# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Initialising the ANN
classifier = Sequential()

# Adding the input layer and the first hidden layer
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))

# Adding the second hidden layer
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))

# Adding the output layer
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

# Compiling the ANN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])



import keras
from keras.models import Sequential
from keras.layers import Dense

classifier = Sequential()
classifier.add(Dense(input_dim = 11, units=6, kernel_initializer='uniform', activation='relu'))
classifier.add(Dense(units=6, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))
classifier.add(Dense( units = 6, kernel_initializer = 'uniform', activation = 'relu'))
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

classifier.compile( optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
classifier.fit(X_train, y_train, batch_size=20, epochs=150 )

# Predicting the Test set results
y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

# improving ANN and finding the best params



# we need to wrap up this ANN and pass diff permutation of these configs.
from keras.wrappers.scikit_learn import KerasClassifier

from sklearn.model_selection import GridSearchCV

from keras.models import Sequential
from keras.layers import Dense

def build_classifier(optimizer):
  classifier = Sequential()
  classifier.add(Dense(input_dim=11, kernel_initializer='uniform', activation='relu', units = 6 ))
  classifier.add(Dense(kernel_initializer='uniform', activation= 'relu', units= 6))
  classifier.add(Dense(kernel_initializer='uniform', activation = 'sigmoid', units = 1))
  classifier.compile(loss = 'binary_crossentropy', optimizer = optimizer, metrics= ['accuracy'] )
  return classifier

classifier = KerasClassifier(build_fn=build_classifier)
parameters = {
    'batch_size' : [25, 30],
    'epochs': [100, 150],
    'optimizer': ['adam', 'rmsprop']
    
    
}

grid_search = GridSearchCV(estimator = classifier, 
                          param_grid = parameters,
                          scoring = 'accuracy',
                          cv=10)

grid_search = grid_search.fit(X_train, y_train)

grid_search.best_params_

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

